#!/usr/bin/env python3
"""
Copyright 2023 Netskope, Inc.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Written by Leandro FrÃ³es
Description: Script used to extract DarkGate payloads from files encoded using a custom base64 and a multibyte XOR operation.
"""

import os
import argparse
import hashlib

CUSTOM_BASE64_CHARS = b"zLAxuU0kQKf3sWE7ePRO2imyg9GSpVoYC6rhlX48ZHnvjJDBNFtMd1I5acwbqT+="
ENCODED_FILE_SEPARATOR = b"splitres"
AUTOIT_SCRIPT_SEPARATOR = b"AU3!EA06"

def xor_decode(data: bytes, key: bytes) -> bytearray:
    """
    :param data: Data to be decoded
    :param key: XOR key to use to decode the data
    :return: final payload
    """
    result = bytearray()
    key_len = len(key)
    
    for i in range(len(data)):
        result.append(data[i] ^ key[i % key_len])
    
    return result

# Custom base64 decoding implemented by rivitna:
# https://github.com/rivitna/Malware2/blob/main/DarkGate/dg_dec_str.py
def base64_decode_block(block, encode_table):
    if len(block) < 2:
        raise ValueError("Base64 decode error.")

    n = 0

    for i in range(4):
        n <<= 6
        if i < len(block):
            b = encode_table.find(block[i])
            if b < 0:
                raise ValueError("Base64 invalid char (%02X)." % block[i])
            n |= b

    dec_block = bytes([(n >> 16) & 0xFF, (n >> 8) & 0xFF])

    if len(block) >= 4:
        dec_block += bytes([n & 0xFF])

    return dec_block

def base64_decode(data, encode_table):
    dec_data = b""

    for block in (data[i : i + 4] for i in range(0, len(data), 4)):
        dec_data += base64_decode_block(block, encode_table)

    return dec_data

def extract_payload(file_content: bytes) -> tuple[bytearray, bytes]:
    """
    :param file_content: File content of the file to be decoded
    :return: Final payload xor key used
    """
    
    correct_location = file_content.split(ENCODED_FILE_SEPARATOR)[1]
    decoded_payload = base64_decode(correct_location, CUSTOM_BASE64_CHARS)
    correct_location = decoded_payload.split(AUTOIT_SCRIPT_SEPARATOR)[2]

    key = correct_location[0:8]
    key_len = len(key)

    correct_payload = correct_location[8:]
    final_payload = xor_decode(correct_payload, key)
    
    return final_payload,key

def main():
    current_path = os.path.dirname(os.path.realpath(__file__)) + "/"

    parser = argparse.ArgumentParser(description="Script used to extract the final DarkGate payloads from obfuscated files")
    parser.add_argument("-p", "--path", required=True, action="store", type=str, help="Path where the files are located")
    parser.add_argument("-o", "--output", required=False, default=current_path + "out", action="store", type=str, help="Output path")
    parser.add_argument("-v", "--verbose", required=False, action="store_true", help="Print detailed information about the extracted payload")
    args = parser.parse_args()
    
    if not os.path.exists(args.output):
        os.mkdir(args.output)

    out_dir = args.output + "/"

    for filename in os.listdir(args.path):
        filepath = os.path.join(args.path, filename)

        with open(filepath, "rb") as f:
            data = f.read()

        final_payload, key = extract_payload(data)
        hash = hashlib.md5(data).hexdigest()

        if args.verbose:
            print("[+] MD5:", hash)
            print("[+] XOR key:", key.decode())
            print()

        with open( out_dir + hash + "_clean", "wb") as f:
            f.write(final_payload)

if __name__ == "__main__":
    main()